/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/
class Solution {
public:
    Node* copyRandomList(Node* head) {
    if(head==NULL)
        return NULL;
    Node* cur=head;
    while(cur!=NULL){
        Node* temp=new Node(cur->val);
        temp->next=cur->next;

        cur->next=temp;

        cur=temp->next;
    }
        cur=head;
        while(cur!=NULL){
            if(cur->random!=NULL)
            cur->next->random=cur->random->next;
            cur=cur->next->next;
        }
        
        cur=head->next;
        Node* pre=head;
        Node *res=head->next;

        while(pre->next!=NULL&pre->next->next!=NULL){
            pre->next=pre->next->next;
            cur->next=cur->next->next;
            pre=pre->next;
            cur=cur->next;
        }
        pre->next=NULL;
        return res;
        // Node *res=head->next;
        // cur=head;
        // Node *p=head->next;
        // while(cur!=NULL){
        //     cur->next=cur->next->next;
        //     cur=cur->next;
        //     if(p->next!=NULL)
        //     {
        //         p->next=p->next->next;
        //         p=p->next;
        //     }
        // }
        // return res;
    }
};
