// class Solution {
// public:
//     string reverseWords(string s) {
//         string res;
//         int n = s.size();
//         if(n == 0) return res;
//         int right = n - 1;
//         while(right >= 0){
//             //从后往前寻找第一字符
//             while(right >= 0 && s[right] == ' ') right--;
//             if(right < 0) break;

//             //从后往前寻找第一个空格
//             int left = right;
//             while( left >= 0 && s[left] != ' ' ) left--;

//             //添加单词到结果
//             res += s.substr(left + 1, right - left);
//             res += ' ';

//             //继续往前分割单词
//             right = left;
//         }
//         //去除最后一个字符空格
//         if (!res.empty()) res.pop_back();
//         return res;
//     }
// };
class Solution {
public:
    string reverseWords(string s) {
        int len = s.length();
        string res = "";
        if (len == 0) {
            return res;
        }
        int j = len - 1;
        while (j >= 0) {
            if (s[j] == ' ') {
                // 当 s[j] 是空格时，j 不断左移
                j--;
                continue;
            }
            while (j >= 0 && s[j] != ' ') {
                // 注意 while 里必须用 && 短路求值，且 j >= 0 要放前面
                // 不然如果 j 变成 -1，那么计算 s[j] 会发生溢出错误！
                j--;
            }
            int pos = j; // 用 pos 保存 j 当前的位置
            j++; // j 现在指向的是一个空格，需要右移一位才能指向一个单词的开头
            if(res.empty()){
            while (s[j] != ' ' && j < len) {
                // 向 res 中添加单词
                res += s[j];
                j++; 
                }
            }else{
                res += ' '; // 单词添加完毕后需要加上一个空格
                while (s[j] != ' ' && j < len) {
                // 向 res 中添加单词
                res += s[j];
                j++; 
                }
            }

            j = pos; // j 回到新添加的单词的最左端再往左一个空格处
            
        }
        // if (res[res.length() - 1] == ' ') {
        //     // 删除 res 最后一位的多余空格
        //     res.erase(res.length() - 1, 1);
        // }
        return res;

    }
};
