class Solution {
public:
    int search(vector<int>& nums, int target) {
    //    int i = 0, j = nums.size() - 1;
    //     while(i <= j) {
    //         int m = (i + j) / 2;
    //         if(nums[m] <= target) i = m + 1;
    //         else j = m - 1;
    //     }
    //     int right = i;
    //     // 若数组中无 target ，则提前返回
    //     if(j >= 0 && nums[j] != target) return 0;
    //     // 搜索左边界 right
    //     i = 0; j = nums.size() - 1;
    //     while(i <= j) {
    //         int m = (i + j) / 2;
    //         if(nums[m] < target) i = m + 1;
    //         else j = m - 1;
    //     }
    //     int left = j;
    //     return right - left - 1;

        int i=0,j=nums.size()-1;
        int left,right,mid;
        while(i<=j){
            mid=(i+j)/2;
            if(nums[mid]<target)
                i=mid+1;
            else 
                j=mid-1;
        }
        left=j;
        i=0,j=nums.size()-1,mid=0;
        while(i<=j){
            mid=(i+j)/2;
            if(nums[mid]>target)
                j=mid-1;
            if(nums[mid]<=target)
                i=mid+1;
        }
            right=i;
        return right-left-1;

    }
};
