//递归，控制好递归的边界
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    unordered_map<int,int> map;
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        for(int i=0;i<inorder.size();i++)
            map[inorder[i]]=i;
        return recur(preorder,inorder,0,inorder.size()-1,0,inorder.size()-1);
    }
    TreeNode* recur(vector<int> &preorder,vector<int> &inorder,int pre_left,int pre_right,int in_left,int in_right){
        if(pre_left>pre_right)
           return NULL;
        TreeNode* root=new TreeNode(preorder[pre_left]);
        int length=map[preorder[pre_left]]-in_left;
        root->left=recur(preorder,inorder,pre_left+1,pre_left+length,in_left,in_left+length-1);
        root->right=recur(preorder,inorder,pre_left+length+1,pre_right,in_left+length+1,in_right);
        return root;
    }
};

class Solution {
public:
    unordered_map<int,int> map;
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        for(int i=0;i<inorder.size();i++)
            map[inorder[i]]=i;
        return recur(preorder,inorder,0,0,inorder.size()-1);
    }
    TreeNode* recur(vector<int>& preorder, vector<int>& inorder,int pre_root,int in_left,int in_right){
        if(in_left>in_right)
           return nullptr;
        TreeNode* node=new TreeNode(preorder[pre_root]);
        int i=map[preorder[pre_root]];
        node->left=recur(preorder,inorder,pre_root+1,in_left,i-1);
        node->right=recur(preorder,inorder,pre_root+i-in_left+1,i+1,in_right);
        return node;
    }
};
