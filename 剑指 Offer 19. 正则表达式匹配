//递归
class Solution {
public:
    bool isMatch(string s, string p) {
        if(p.empty()) 
            return s.empty();
    /*if(p[1]=='*')
        return isMatch(s,p.substr(2))||((!s.empty()&&(s[0]==p[0]||p[0]=='.'))&&isMatch(s.substr(1),p));
    else  if(!s.empty()&&(s[0]==p[0]||p[0]=='.'))
        return (isMatch(s.substr(1),p.substr(1))); 
    return false;*/

    if(p[1] == '*'){
            return isMatch(s, p.substr(2)) || (!s.empty() && (s[0] == p[0] || p[0] == '.')) && isMatch(s.substr(1), p);
        }
    else{
        return !s.empty() && (s[0] == p[0] || p[0] == '.') && (isMatch(s.substr(1), p.substr(1)));
        }
    }
};
//动态规划
class Solution {
public:
    bool isMatch(string s, string p) {
        if(p.empty())
            return s.empty();
        int m=s.length(),n=p.length();
        bool dp[m+1][n+1];
        memset(dp,false,(m+1)*(n+1));
        dp[0][0]=true;
        for(int i=0;i<n;i++){
            if(p[i]=='*'&&dp[0][i-1])
                dp[0][i+1]=true;
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(p[j]==s[i]||p[j]=='.')
                    dp[i+1][j+1]=dp[i][j];
                if(p[j]=='*'){
                    if(p[j-1]!=s[i]&&p[j-1]!='.')
                        dp[i+1][j+1]=dp[i+1][j-1];
                    else
                        dp[i+1][j+1]=dp[i+1][j]||dp[i+1][j-1]||dp[i][j+1];
                }
            }
        }
        return dp[m][n];
    }
};
