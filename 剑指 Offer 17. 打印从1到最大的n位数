
class Solution {
public:
    vector<int> res;
    vector<int> printNumbers(int n) {
    //void printNumbers(int n) {
        if(n<=0)
        return res;
        char* number=new char[n+1];
        memset(number,'0',n);
        number[n]='\0';
        while(!increment(number))
            print(number);
        delete[] number;
        return res;
    }
    bool increment(char* number){
        bool isOverflow=false;
        int nTakeover=0;
        int nLength=strlen(number);
        for(int i=nLength-1;i>=0;i--){
            int nSum=number[i]-'0'+nTakeover;
            if(i==nLength-1)
                nSum++;
            if(nSum>=10)
                {
                    if(i==0)
                    isOverflow=true;
                    else
                    {
                        nSum-=10;
                        nTakeover=1;
                        number[i]='0'+nSum;
                    }
                }
            else
            {
                number[i]='0'+nSum;
                break;
            }    
        }
        return isOverflow;
    }
    void print(char* number){
        bool isBeginning=true;
        string s="";
        int nLength=strlen(number);
       // for(int i=0;i<nLength;i++){
           while(*number!='\0'){
            if(isBeginning&&*number!='0')
                isBeginning=false;
            //if(!isBeginning)
            // res.push_back(number[i]);
            //cout<<number[i]<<',';
            if (!isBeginning)
			{
				s += *number;
			}
			number++;
		}
		int num = stoi(s);//转为整数
		res.push_back(num);
        }
};
//递归
class Solution {
public:
	vector<int> res;
	vector<int> printNumbers(int n) {
    if(n<=0)
        return res;
    string number(n,'0');
    for(int i=0;i<=9;i++){
        number[0]=i+'0';
        pertmutationNumbers(number,n,1);
    }
    return res;
    }
    void pertmutationNumbers(string&number,int length,int index){
        if(index==length){
            saveNumber(number);
            return;
        }
        else{
            for(int i=0;i<=9;i++){
                number[index]='0'+i;
                pertmutationNumbers(number,length,index+1);
            }
        }
    }
    void saveNumber(string number){
        string tempStr(number.size(),'0');
        cout<<stoi(number)<<" ";
        if(number!=tempStr)
        res.push_back(stoi(number));
    }
};
